@model IEnumerable<Book>
@{
    int currentPage = ViewData["CurrentPage"] != null ? (int)ViewData["CurrentPage"] : 1;
    int totalPages = ViewData["TotalPages"] != null ? (int)ViewData["TotalPages"] : 1;
}
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function () {
        // Listen for changes in the status filter
        $('#status').on('change', function () {
            filterBooks();
        });

        function filterBooks() {
            // Get the selected status value
            var selectedStatus = $('#status').val();

            // Log the selected status to console for debugging
            console.log('Selected Status: ' + selectedStatus);

            // Loop through each book and check if it matches the selected status
            $('.book').each(function () {
                var bookStatus = $(this).data('status');

                // Log the book status to check the value
                console.log('Book Status: ' + bookStatus);

                // Show or hide the row based on the selected status
                if (selectedStatus === "" || selectedStatus === bookStatus) {
                    $(this).show();  // Show the row
                } else {
                    $(this).hide();  // Hide the row
                }
            });
        }
    });
</script>
<script>
    $(document).ready(function () {
        // Listen for changes in the category filter
        $('#CategoryId').on('change', function () {
            filterBooksByCategory();
        });

        function filterBooksByCategory() {
            // Get the selected category ID value
            var selectedCategoryId = $('#CategoryId').val();

            // Log the selected category ID to console for debugging
            console.log('Selected Category ID: ' + selectedCategoryId);

            // Loop through each book and check if it matches the selected category ID
            $('.book').each(function () {
                var bookCategoryId = $(this).data('category-id');

                // Log the book category ID to check the value
                console.log('Book Category ID: ' + bookCategoryId);

                // Show or hide the row based on the selected category ID
                if (selectedCategoryId === "" || selectedCategoryId == bookCategoryId) {
                    $(this).show();  // Show the row if category ID matches or no category selected
                } else {
                    $(this).hide();  // Hide the row if it doesn't match
                }
            });
        }
    });
</script>


<head>
    <style>
        /* Apply a background image to the body */
        body {
            background-image: url('/images/home.jpg'); /* Update the path to match your image location */
            background-size: cover; /* Make sure the image covers the entire page */
            background-position: center; /* Center the image */
            background-repeat: no-repeat; /* Prevent tiling */
            height: 100vh; /* Fit the viewport height */
            margin: 0; /* Remove default margins */
            font-family: Arial, sans-serif; /* Optional: Set a clean font */
        }

          /* Style the main content to make it readable */
        .content {
            background-color: rgba(0, 0, 0, 0.5) !important; /* Semi-transparent white background */
            padding: 20px;
            border-radius: 8px;
            margin: 20px auto;
            max-width: 80%; /* Adjust the width as needed */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add a subtle shadow */
             color: darkgoldenrod !important;
        }
               /* Table Header Styling */
table th {
  background-color: rgba(0, 0, 0, 0.2); /* Slight dark background */
  color: darkgoldenrod !important; /* Dark gold text */
  text-align: center;
  padding: 10px;
}

/* Table Body Styling */
table td {
  color: darkgoldenrod !important; /* Dark gold text */
  text-align: center;
  padding: 8px;
}

/* Table Styling */
table.table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

/* Border for Tables */
table.table-bordered th, table.table-bordered td {
  border: 1px solid darkgoldenrod; /* Dark gold border */
}

/* Hover Effect on Table Rows */
table tbody tr:hover {
  background-color: rgba(255, 223, 0, 0.1); /* Light gold background on hover */
}

/* Table Title Styling */
h3 {
  color: darkgoldenrod; /* Dark gold text for table titles */
  font-weight: bold;
  margin-bottom: 15px;}
  .pagination {
    text-align: center;
    margin-top: 20px;
}

.pagination a {
    padding: 8px 16px;
    margin: 0 4px;
    border: 1px solid #ccc;
    text-decoration: none;
    color: darkgoldenrod;
    border-radius: 4px;
}

.pagination a.active {
    background-color: goldenrod;
    color: black;
}

.pagination a:hover {
    background-color: lightgoldenrodyellow;
}

   
    </style>
</head>



<div class="content">
@* @model IEnumerable<LibraryManagementSystem.Models.Book> *@
<form method="get" asp-action="Index">
    <div class="form-group">
        <input type="text" name="searchQuery" class="form-control" placeholder="Search by book name..." value="@ViewData["CurrentSearch"]" />
     <div class="d-flex">
    <button type="submit" class="btn btn-primary mt-2 flex-fill" id="Search" style="width: 48%;">Search</button>
    <a href="@Url.Action("Index")" id="Clear" class="btn btn-secondary mt-2 ms-2 flex-fill" style="width: 48%;">Clear</a>
</div>


    </div>
</form>
<div class="row">
    <div class="col-md-6">
        <div class="form-group">
            <label for="CategoryId">Category</label>
            <select class="form-control" id="CategoryId" name="CategoryId">
                <option value="">Select a Category</option>
                @foreach (var category in (IEnumerable<LibraryManagementSystem.Models.Category>)ViewData["Categories"])
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
    </div>

    <div class="col-md-6">
        <div class="form-group">
            <label for="status">Status</label>
            <select class="form-control" id="status" name="status">
                <option value="">All Status</option>
                <option value="Available">Available</option>
                <option value="Rented">Rented</option>
                <option value="Sold">Sold</option>
            </select>
        </div>
    </div>
</div>

<h2 id="B">Books</h2>

<table class="table">
    <thead>
             <th >Title</th>
            <th >Author</th>
            <th >ISBN</th>
            <th>Category</th>
            <th >Status</th> 
            <th >Image</th>
            <th>Published Year</th>
            <th >Actions</th>
    </thead>
    <tbody>
        @foreach (var book in Model)
        {
            <tr class="book" data-status="@book.Status" data-category-id="@book.Category.Id">
                <td>@book.Title</td>
                <td>@book.Author</td>
                <td>@book.ISBN</td>
                <td>@book.Category.Name</td>
                <td>@book.Status</td> 
                <td>
                    @if (!string.IsNullOrEmpty(book.ImagePath))
                    {
                        <img src="@book.ImagePath" alt="Book Image" width="100" />
                    }
                </td>
                <td>@book.PublishedYear</td>
                <td>
                    <a href="@Url.Action("Details", "Book", new { id = book.Id })" class="btn btn-info" >Details</a>|
                    <a href="@Url.Action("Edit", "Book", new { id = book.Id })" class="btn btn-primary">Edit</a> |
                    <a href="@Url.Action("Delete", "Book", new { id = book.Id })" class="btn btn-danger">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>
<!-- Pagination controls -->
<div class="pagination">
    @if (currentPage > 1)
    {
        <a href="@Url.Action("Index", new { page = currentPage - 1, searchQuery = ViewData["CurrentSearch"] })">Previous</a>
    }

    @for (int i = 1; i <= totalPages; i++)
    {
        <a href="@Url.Action("Index", new { page = i, searchQuery = ViewData["CurrentSearch"] })" class="@(i == currentPage ? "active" : "")">@i</a>
    }

    @if (currentPage < totalPages)
    {
        <a href="@Url.Action("Index", new { page = currentPage + 1, searchQuery = ViewData["CurrentSearch"] })">Next</a>
    }
</div>

<a href="@Url.Action("Create", "Book")" 
   style="color: darkgoldenrod; text-decoration: none; font-size: 1.2rem; padding: 5px 10px; border: 1px solid darkgoldenrod; border-radius: 5px; transition: background-color 0.3s ease;" 
   onmouseover="this.style.backgroundColor='darkgoldenrod'; this.style.color='black';" 
   onmouseout="this.style.backgroundColor='transparent'; this.style.color='darkgoldenrod';">
    Create New Book
</a>

</div>